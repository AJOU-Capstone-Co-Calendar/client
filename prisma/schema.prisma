// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  introduce     String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  SentFriendRequest                 FriendRequest[]             @relation("friendRequest_sender")
  ReceivedFriendRequest             FriendRequest[]             @relation("friendRequest_receiver")
  friends                           FriendRelationship[]        @relation("friendRelationship_userSelf")
  friendOf                          FriendRelationship[]        @relation("friendRelationship_userOther")
  ScheduleParticipant               ScheduleParticipant[]
  ScheduleParticipantInviteSents    ScheduleParticipantInvite[] @relation("scheduleParticipant_sender")
  ScheduleParticipantInviteReceives ScheduleParticipantInvite[] @relation("scheduleParticipant_receiver")
  OwnedSchedules                    Schedule[]
  GroupParticipant                  GroupParticipant[]
  Categories                        Category[]
  ScheduleParticipantInvite         ScheduleParticipantInvite[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FriendRequest {
  id String @id @default(cuid())

  senderId String
  sender   User   @relation("friendRequest_sender", fields: [senderId], references: [id], onDelete: Cascade)

  receiverId String
  receiver   User   @relation("friendRequest_receiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@index([receiverId])
  @@index([senderId])
}

model FriendRelationship {
  id String @id @default(cuid())

  userSelfId String
  userSelf   User   @relation("friendRelationship_userSelf", fields: [userSelfId], references: [id], onDelete: Cascade)

  userOtherId String
  userOther   User   @relation("friendRelationship_userOther", fields: [userOtherId], references: [id], onDelete: Cascade)

  @@unique([userSelfId, userOtherId])
  @@index([userSelfId])
  @@index([userOtherId])
}

model Category {
  id      String @id
  name    String
  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  schedules Schedule[]

  @@unique([name, ownerId])
  @@index([ownerId])
}

model Schedule {
  id         String    @id @default(cuid())
  title      String
  summary    String
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  startDate  DateTime  @db.Date
  startTime  DateTime? @db.Time
  endDate    DateTime  @db.Date
  endTime    DateTime? @db.Time
  location   String?

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participants       ScheduleParticipant[]
  participantInvites ScheduleParticipantInvite[]

  @@index([categoryId])
  @@index([ownerId])
}

model ScheduleParticipantInvite {
  id String @id @default(cuid())

  scheduleId String
  schedule   Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  invitedId String
  invited   User   @relation("scheduleParticipant_sender", fields: [invitedId], references: [id], onDelete: Cascade)

  inviteeId String
  invitee   User    @relation("scheduleParticipant_receiver", fields: [inviteeId], references: [id], onDelete: Cascade)
  User      User?   @relation(fields: [userId], references: [id])
  userId    String?

  @@index([scheduleId])
  @@index([invitedId])
  @@index([inviteeId])
}

model ScheduleParticipant {
  id String @id @default(cuid())

  scheduleId String
  schedule   Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([scheduleId])
  @@index([userId])
}

enum GroupRole {
  Admin
  User
}

model Group {
  id      String @id @default(cuid())
  name    String
  summary String

  schedules    GroupSchedule[]
  participants GroupParticipant[]
  categories   GroupCategory[]
}

model GroupCategory {
  name String @id

  groupId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  schedules GroupSchedule[]

  @@index([groupId])
}

model GroupParticipant {
  groupId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  role GroupRole

  participantId String
  participant   User   @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@id([groupId, participantId])
  @@index([groupId])
  @@index([participantId])
}

model GroupSchedule {
  id           String         @id @default(cuid())
  title        String
  summary      String
  categoryName String?
  category     GroupCategory? @relation(fields: [categoryName], references: [name], onDelete: Cascade)
  startDate    DateTime       @db.Date
  startTime    DateTime?      @db.Time
  endDate      DateTime       @db.Date
  endTime      DateTime?      @db.Time
  location     String?

  groupId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([groupId])
}
