// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  ScheduleParticipant        ScheduleParticipant[]
  ScheduleParticipantInviter ScheduleParticipantInvite[] @relation("inviter")
  ScheduleParticipantInvited ScheduleParticipantInvite[] @relation("invitee")
  Following                  Following[]                 @relation("followee")
  Follower                   Following[]                 @relation("follower")
  SentFollowRequests         FollowRequest[]             @relation("follow_request_sender")
  ReceivedFollowRequests     FollowRequest[]             @relation("follow_request_receiver")
  OwnedSchedules             Schedule[]
  GroupParticipant           GroupParticipant[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FollowRequest {
  id String @id @default(cuid())

  followerId String
  follower   User   @relation("follow_request_sender", fields: [followerId], references: [id], onDelete: Cascade)

  followeeId String
  followee   User   @relation("follow_request_receiver", fields: [followeeId], references: [id], onDelete: Cascade)

  @@unique([followerId, followeeId])
  @@index([followerId])
  @@index([followeeId])
}

model Following {
  id String @id @default(cuid())

  followerId String
  follower   User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)

  followeeId String
  followee   User   @relation("followee", fields: [followeeId], references: [id], onDelete: Cascade)

  @@unique([followerId, followeeId])
  @@index([followerId])
  @@index([followeeId])
}

model Schedule {
  id        String    @id @default(cuid())
  title     String
  summary   String
  startDate DateTime  @db.Date
  startTime DateTime? @db.Time
  endDate   DateTime  @db.Date
  endTime   DateTime? @db.Time
  location  String

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participants              ScheduleParticipant[]
  ScheduleParticipantInvite ScheduleParticipantInvite[]

  @@index([ownerId])
}

model ScheduleParticipantInvite {
  id         String   @id @default(cuid())
  scheduleId String
  schedule   Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  inviterId String
  inviter   User   @relation("inviter", fields: [inviterId], references: [id], onDelete: Cascade)

  inviteeId String
  invitee   User   @relation("invitee", fields: [inviteeId], references: [id], onDelete: Cascade)

  @@index([scheduleId])
  @@index([inviterId])
  @@index([inviteeId])
}

model ScheduleParticipant {
  id String @id @default(cuid())

  scheduleId String
  schedule   Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([scheduleId])
  @@index([userId])
}

model Group {
  id   String @id @default(cuid())
  name String

  schedules    GroupSchedule[]
  participants GroupParticipant[]
}

enum GroupRole {
  Admin
  User
}

model GroupParticipant {
  groupId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  role GroupRole

  participantId String
  participant   User   @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@unique([groupId, participantId])
  @@index([groupId])
  @@index([participantId])
}

model GroupSchedule {
  id        String    @id @default(cuid())
  title     String
  summary   String
  startDate DateTime  @db.Date
  startTime DateTime? @db.Time
  endDate   DateTime  @db.Date
  endTime   DateTime? @db.Time
  location  String

  groupId String
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([groupId])
}
